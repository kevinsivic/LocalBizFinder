name: LocalSpot CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: localspot_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check code formatting
        run: npm run format:check || echo "Format check failed but continuing"
        
      - name: Lint code
        run: npm run lint || echo "Lint failed but continuing"
        
      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/localspot_test
          SESSION_SECRET: test_secret
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            test-results/
            coverage/
          retention-days: 7

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.localspot.app
    
    steps:
      - name: Deploy to staging server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USERNAME }}
          key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/localspot
            echo "Pulling latest code..."
            git pull
            
            echo "Creating or updating environment file..."
            cat > .env << EOL
            NODE_ENV=production
            PORT=5000
            POSTGRES_USER=postgres
            POSTGRES_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
            POSTGRES_DB=localspot
            DATABASE_URL=postgres://postgres:${{ secrets.STAGING_DB_PASSWORD }}@postgres:5432/localspot
            SESSION_SECRET=${{ secrets.STAGING_SESSION_SECRET }}
            EOL
            
            echo "Pulling latest image..."
            docker-compose pull
            
            echo "Starting services..."
            docker-compose -f docker-compose.production.yml up -d --build
            
            echo "Running database migrations..."
            docker-compose -f docker-compose.production.yml exec -T app npx drizzle-kit push:pg
            
            echo "Creating backup..."
            ./docker-setup.sh backup:prod

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://localspot.app
    
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_SSH_HOST }}
          username: ${{ secrets.PRODUCTION_SSH_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/localspot
            echo "Pulling latest code..."
            git pull
            
            echo "Creating or updating environment file..."
            cat > .env << EOL
            NODE_ENV=production
            PORT=5000
            POSTGRES_USER=postgres
            POSTGRES_PASSWORD=${{ secrets.PRODUCTION_DB_PASSWORD }}
            POSTGRES_DB=localspot
            DATABASE_URL=postgres://postgres:${{ secrets.PRODUCTION_DB_PASSWORD }}@postgres:5432/localspot
            SESSION_SECRET=${{ secrets.PRODUCTION_SESSION_SECRET }}
            EOL
            
            echo "Creating backup before deployment..."
            ./docker-setup.sh backup:prod
            ./docker-setup.sh volume:backup:prod
            
            echo "Pulling latest image..."
            docker-compose pull
            
            echo "Starting services..."
            docker-compose -f docker-compose.production.yml up -d --build
            
            echo "Running database migrations..."
            docker-compose -f docker-compose.production.yml exec -T app npx drizzle-kit push:pg
            
            echo "Verifying deployment..."
            curl -f http://localhost:5000/api/health || exit 1